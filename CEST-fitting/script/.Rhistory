PACKAGES <- readRDS("C:/Users/berna/Downloads/PACKAGES.rds")
View(PACKAGES)
View(PACKAGES)
PACKAGES
clear
clc
clear
file <- file.choose()
readRDS()
readRDS(file = file)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("bayesplot")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install_cmdstan()
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
install_cmdstan(cores = 4, overwrite = TRUE)
cmdstan_path()
cmdstan_version()
file <- file.path(cmdstan_path(), "examples","bernoulli","bernoulli.stan")
mod <- cmdstan_model(file)
mod$print
mod$exe_file()
mod$print()
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500 # print update every 500 iters
)
$sample
fit$summary()
mcmc_hist(fit$draw("theta"))
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
mcmc_hist(fit$draw("theta"))
# default is a 3-D draws_array object from the posterior package
# iterations x chains x variables
draws_arr <- fit$draws() # or format="array"
str(draws_arr)
# draws x variables data frame
draws_df <- fit$draws(format = "df")
str(draws_df)
# this should be identical to draws_df created via draws(format = "df")
draws_df_2 <- as_draws_df(draws_arr)
identical(draws_df, draws_df_2)
mcmc_hist(fit$draws("theta"))
A = [2,2;3,4]
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(bayesplot)
installed.packages(bayesplot)
installed.packages(rstan)
library(rstan)
detach("package:rstan", unload = TRUE)
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
installed.packages("rstan")
installed.packages("bayesplot")
require(rstan)
require(bayesplot)
require(parallel)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_gray())
modelName <- "CEST"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
Xdata <- read.csv(file.path(dataDir, "LP30_323.csv"),header = FALSE)
xZ = with(Xdata,V1)
Z = with(Xdata,V2)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
mod$compile(stanc_options = list("O1"))
hist(Z)
# Create data set
data_list <- list(
N = length(xZ),
R1a = 8,
R2a = 393,
w1 = 500,
dw = -260,
tp = 0.2,
xZ = xZ,
Z = Z
)
# Specify initial estimates
init_estimates = function() list(
R1b = runif(n=1, min=1, max=150),
R2b = runif(n=1, min=15000, max=35000),
f = runif(n=1, min=0.0001, max=0.1),
k = runif(n=1, min=200, max=400),
sigma = runif(n=1, min=0, max=0.1)
)
fit <- mod$sample(
data = data_list,
chains = 4,
parallel_chains = 4,
init = init_estimates,
)
save(fit, file = file.path(outDir, paste(modelName, "Fit.Rsave", sep = "")))
pars_to_fit <- c("R1b", "R2b", "f", "k")
pars_to_fit_zaiss <- c("R2b", "f", "k")
posterior <- as.array(fit$draws())
# Print summary statistics
fit$summary(pars_to_fit)
mcmc_combo(
posterior,
combo = c("dens_overlay", "trace"),
pars = pars_to_fit
)
mcmc_rhat(rhat(fit,pars = pars_to_fit)) + yaxis_text(hjust = 1)
mcmc_neff(neff_ratio(fit,pars = pars_to_fit)) + yaxis_text(hjust = 1)
mcmc_pairs(posterior, pars = pars_to_fit)
Z_rep <- as_draws_matrix(fit$draws("Z_rep"), .nchains = 1)
Z_rep_mean = colMeans(Z_rep)
plot(xZ,Z)
lines(xZ,Z_rep_mean,col = "blue")
ppc_loo_pit_overlay(Z, Z_rep, lw = lw)
ppc_loo_pit_overlay(Z, Z_rep)
ppc_loo_pit_overlay(Z, Z_rep, lw = "lw")
ppc_dens_overlay(Z, Z_rep[1:25, ])
dev.off()
rm(list = ls())
gc()
# Load libraries
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_gray())
stan_program <- "
data{
array[10] real x;
array[10] real y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma)
}
generated_quantities{
array[10] real y_rep
y_rep = normal_rng(a + b * x, sigma)
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
stan_program <- "
data{
array[10] real x;
array[10] real y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma);
}
generated_quantities{
array[10] real y_rep
y_rep = normal_rng(a + b * x, sigma)
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
stan_program <- "
data{
array[10] real x;
array[10] real y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma);
}
generated_quantities{
array[10] real y_rep;
y_rep = normal_rng(a + b * x, sigma);
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
stan_program <- "
data{
array[10] real x;
array[10] real y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma);
}
generated quantities{
array[10] real y_rep;
y_rep = normal_rng(a + b * x, sigma);
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
stan_program <- "
data{
vector[10] x;
vector[10] y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma);
}
generated quantities{
array[10] real y_rep;
y_rep = normal_rng(a + b * x, sigma);
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
data_list <- list(
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(5.19,6.56,9.19,8.09,7.6,7.08,6.74,9.3,8.98,11.5)
data_list <- list(
x = c(1,2,3,4,5,6,7,8,9,10),
y = c(5.19,6.56,9.19,8.09,7.6,7.08,6.74,9.3,8.98,11.5)
)
pars_to_plot <- c("a","b","sigma")
other_pars <- c("y_rep")
parameters <- c(pars_to_plot,other_pars)
fit <- mod$sample(
data = data_list,
pars = parameters,
chains = 4,
parallel_chains = 4
)
rm(list = ls())
gc()
# Load libraries
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_gray())
stan_program <- "
data{
vector[10] x;
vector[10] y;
}
parameters{
real a;
real b;
real<lower=0> sigma;
}
model{
a ~ normal(0,100);
b ~ normal(0,100);
sigma ~ cauchy(0,2);
y ~ normal(a + b * x, sigma);
}
generated quantities{
array[10] real y_rep;
y_rep = normal_rng(a + b * x, sigma);
}
"
stan_file <- write_stan_file(stan_program)
mod <- cmdstan_model(stan_file)
data_list <- list(
x = c(1,2,3,4,5,6,7,8,9,10),
y = c(5.19,6.56,9.19,8.09,7.6,7.08,6.74,9.3,8.98,11.5)
)
pars_to_plot <- c("a","b","sigma")
fit <- mod$sample(
data = data_list,
chains = 4,
parallel_chains = 4
)
posterior <- as.array(fit$draws())
fit$summary(pars_to_fit)
pars_to_fit <- c("a","b","sigma")
fit$summary(pars_to_fit)
mcmc_combo(
posterior,
combo = c("dens_overlay", "trace"),
pars = pars_to_fit
)
mcmc_rhat(rhat(fit,pars = pars_to_fit)) + yaxis_text(hjust = 1)
mcmc_neff(neff_ratio(fit,pars = pars_to_fit)) + yaxis_text(hjust = 1)
mcmc_pairs(posterior, pars = pars_to_fit)
# Posterior predictive checking
y_rep <- as_draws_matrix(fit$draws("y_rep"), .nchains = 1)
y_rep_mean = colMeans(y_rep)
plot(x,y)
plot(data_list$x,data_list$y)
plot(data_list$x,y_rep_mean,col = "blue")
plot(data_list$x,data_list$y)
lines(data_list$x,y_rep_mean,col = "blue")
x = c(1,2,3,4,5,6,7,8,9,10)
y = c(5.19,6.56,9.19,8.09,7.6,7.08,6.74,9.3,8.98,11.5)
data_list <- list(x,y)
ppc_dens_overlay(y, yrep[1:25, ])
ppc_dens_overlay(y, y_rep[1:25, ])
rm(list = ls())
gc()
dev.off()
# Load libraries
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_gray())
modelName <- "CEST"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
# Model Configuration -----------------------------------------------------
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Read data
Xdata <- read.csv(file.path(dataDir, "LP30_323.csv"),header = FALSE)
xZ = with(Xdata,V1)
Z = with(Xdata,V2)
# Create data set
data_list <- list(
N = length(xZ),
R1a = 8,
R2a = 393,
w1 = 500,
dw = -260,
tp = 0.2,
xZ = xZ,
Z = Z
)
# Specify initial estimates
init_estimates = function() list(
R1b = runif(n=1, min=1, max=150),
R2b = runif(n=1, min=15000, max=35000),
f = runif(n=1, min=0.0001, max=0.1),
k = runif(n=1, min=200, max=400),
sigma = runif(n=1, min=0, max=0.1)
)
fit_pml <- mod$optimize(
data = data_list,
# init = init_estimates
)
mod$compile(stanc_options = list("O1"))
# Find the mode (per parameter) of the joint posterior distribution
fit_pml <- mod$optimize(
data = data_list,
# init = init_estimates
)
fit_pml$summary(pars_to_fit)
pars_to_fit <- c("R1b", "R2b", "f", "k")
fit_pml$summary(pars_to_fit)
fit_pml <- mod$optimize(
data = data_list,
init = init_estimates
)
fit_pml$summary(pars_to_fit)
load(file.path(outDir, paste(modelName, "Fit.Rsave", sep = "")))
fit$cmdstan_diagnose()
