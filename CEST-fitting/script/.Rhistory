PACKAGES <- readRDS("C:/Users/berna/Downloads/PACKAGES.rds")
View(PACKAGES)
View(PACKAGES)
PACKAGES
clear
clc
clear
file <- file.choose()
readRDS()
readRDS(file = file)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("bayesplot")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install_cmdstan()
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
install_cmdstan(cores = 4, overwrite = TRUE)
cmdstan_path()
cmdstan_version()
file <- file.path(cmdstan_path(), "examples","bernoulli","bernoulli.stan")
mod <- cmdstan_model(file)
mod$print
mod$exe_file()
mod$print()
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500 # print update every 500 iters
)
$sample
fit$summary()
mcmc_hist(fit$draw("theta"))
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
mcmc_hist(fit$draw("theta"))
# default is a 3-D draws_array object from the posterior package
# iterations x chains x variables
draws_arr <- fit$draws() # or format="array"
str(draws_arr)
# draws x variables data frame
draws_df <- fit$draws(format = "df")
str(draws_df)
# this should be identical to draws_df created via draws(format = "df")
draws_df_2 <- as_draws_df(draws_arr)
identical(draws_df, draws_df_2)
mcmc_hist(fit$draws("theta"))
A = [2,2;3,4]
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(bayesplot)
installed.packages(bayesplot)
installed.packages(rstan)
library(rstan)
detach("package:rstan", unload = TRUE)
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
installed.packages("rstan")
installed.packages("bayesplot")
require(rstan)
require(bayesplot)
require(parallel)
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_wsj())
install.packages(ggthemes)
install.packages("ggthemes")
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_wsj())
library(ggthemes)
library(ggplot2)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_wsj())
modelName <- "CEST_multi_data_sets_ppc"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
if (dir.exists(outDir) = FALSE)
if (dir.exists(outDir) == FALSE)
{
dir.create(outDir)
dir.create(figDir)
}
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_dendrotes_CEST_exp_fit.csv"),header = FALSE, skip = 3)
xZ = with(Xdata,V1) * 16.546 * 9.4; # Convert from ppm to Hz and Lithium.
Z1 = with(Xdata,V20)
Z2 = with(Xdata,V22)
Z3 = with(Xdata,V24)
Z4 = with(Xdata,V26)
Z = c(Z1,Z2,Z3,Z4)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_1000_1500_2000_exp"
data_list <- list(
K = 4,
N = c(length(Z1),length(Z2),length(Z3),length(Z4)),
R1a = 8,
R2a = 393,
w1 = c(500,1000,1500,2000),
dw = -260 * 9.4 * 16.546,
tp = 0.2,
xZ = rep(xZ,times = 4),
Z = c(Z1,Z2,Z3,Z4)
)
# Specify initial estimates
init_estimates = function() list(
R1b_std = runif(n=1, min=0.001, max=1),
R2b_std = runif(n=1, min=0.001, max=1),
f_std = runif(n=1, min=0.001, max=1),
f = runif(n=1, min=0.001, max = 1),
k_std = runif(n=1, min=0.001, max=1),
sigma_std = runif(n=1, min=0.001, max=1),
sigma = runif(n=1, min=0.001, max=1)
)
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
init = init_estimates,
iter_warmup = 750,
iter_sampling = 2250,
algorithm = fixed_param
)
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
init = init_estimates,
iter_warmup = 750,
iter_sampling = 2250,
fixed_param = TRUE
)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
init = init_estimates,
iter_warmup = 750,
iter_sampling = 2250,
fixed_param = TRUE
)
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
fit_summary <- fit$summary(pars_to_fit)
print(fit_summary)
p_mcmc_combo <- mcmc_combo(
posterior,
combo = c("dens_overlay", "trace"),
pars = pars_to_fit)
View(fit)
Z_rep <- as_draws_matrix(fit$draws("Z_sim"), .nchains = 1)
Z_rep_mean = colMeans(Z_rep)
ppc_dens_overlay(Z,Z_rep[1:25, ])
shinystan::launch_shinystan(fit)
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
View(posterior)
head.Z_rep
head(Z_rep)
rm(list = ls())
gc()
dev.off()
# Load libraries
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
library(ggthemes)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_wsj())
modelName <- "CEST_multi_data_sets_ppc"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
if (dir.exists(outDir) == FALSE)
{
dir.create(outDir)
dir.create(figDir)
}
# Model Configuration -----------------------------------------------------
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_dendrotes_CEST_exp_fit.csv"),header = FALSE, skip = 3)
xZ = with(Xdata,V1) * 16.546 * 9.4; # Convert from ppm to Hz and Lithium.
Z1 = with(Xdata,V20)
Z2 = with(Xdata,V22)
Z3 = with(Xdata,V24)
Z4 = with(Xdata,V26)
Z = c(Z1,Z2,Z3,Z4)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_1000_1500_2000_exp"
# Create data set
data_list <- list(
K = 4,
N = c(length(Z1),length(Z2),length(Z3),length(Z4)),
R1a = 8,
R2a = 393,
w1 = c(500,1000,1500,2000),
dw = -260 * 9.4 * 16.546,
tp = 0.2,
xZ = rep(xZ,times = 4),
Z = c(Z1,Z2,Z3,Z4)
)
# Specify initial estimates
init_estimates = function() list(
R1b_std = runif(n=1, min=0.001, max=1),
R2b_std = runif(n=1, min=0.001, max=1),
f_std = runif(n=1, min=0.001, max=1),
f = runif(n=1, min=0.001, max = 1),
k_std = runif(n=1, min=0.001, max=1),
sigma_std = runif(n=1, min=0.001, max=1),
sigma = runif(n=1, min=0.001, max=1)
)
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
head(Z_rep)
head(fit$draws())
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
Z_rep <- as_draws_matrix(fit$draws("Z_sim"), .nchains = 1)
Z_rep_mean = colMeans(Z_rep)
ppc_dens_overlay(Z,Z_rep[1:25, ])
head(Z_rep_mean)
View(Z_rep_mean)
rm(list = ls())
gc()
# Load libraries
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
library(ggthemes)
color_scheme_set("darkgray")
bayesplot_theme_set(new = theme_wsj())
modelName <- "CEST_multi_data_sets_ppc"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
if (dir.exists(outDir) == FALSE)
{
dir.create(outDir)
dir.create(figDir)
}
# Model Configuration -----------------------------------------------------
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_dendrotes_CEST_exp_fit.csv"),header = FALSE, skip = 3)
xZ = with(Xdata,V1) * 16.546 * 9.4; # Convert from ppm to Hz and Lithium.
Z1 = with(Xdata,V20)
Z2 = with(Xdata,V22)
Z3 = with(Xdata,V24)
Z4 = with(Xdata,V26)
Z = c(Z1,Z2,Z3,Z4)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_1000_1500_2000_exp"
# Create data set
data_list <- list(
K = 4,
N = c(length(Z1),length(Z2),length(Z3),length(Z4)),
R1a = 8,
R2a = 393,
w1 = c(500,1000,1500,2000),
dw = -260 * 9.4 * 16.546,
tp = 0.2,
xZ = rep(xZ,times = 4),
Z = c(Z1,Z2,Z3,Z4)
)
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_dendrotes_CEST_exp_fit.csv"),header = FALSE, skip = 3)
xZ = with(Xdata,V1) * 16.546 * 9.4; # Convert from ppm to Hz and Lithium.
Z1 = with(Xdata,V20)
Z2 = with(Xdata,V22)
Z3 = with(Xdata,V24)
Z4 = with(Xdata,V26)
Z = c(Z1,Z2,Z3,Z4)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_1000_1500_2000_exp"
# Create data set
data_list <- list(
K = 4,
N = c(length(Z1),length(Z2),length(Z3),length(Z4)),
R1a = 8,
R2a = 393,
w1 = c(500,1000,1500,2000),
dw = -260 * 9.4 * 16.546,
tp = 0.2,
xZ = rep(xZ,times = 4),
Z = c(Z1,Z2,Z3,Z4)
)
# Run MCMC ----------------------------------------------------------------
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
min(fit$draws(f))
min(fit$draws("f"))
min(fit$draws("max"))
max(fit$draws("f"))
min(fit$draws("k"))
fit$diagnostic_summary()
fit$init()
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_dendrotes_CEST_exp_fit.csv"),header = FALSE, skip = 3)
xZ = with(Xdata,V1) * 16.546 * 9.4; # Convert from ppm to Hz and Lithium.
Z1 = with(Xdata,V20)
Z2 = with(Xdata,V22)
Z3 = with(Xdata,V24)
Z4 = with(Xdata,V26)
Z = c(Z1,Z2,Z3,Z4)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_1000_1500_2000_exp"
# Create data set
data_list <- list(
K = 4,
N = c(length(Z1),length(Z2),length(Z3),length(Z4)),
R1a = 8,
R2a = 393,
w1 = c(500,1000,1500,2000),
dw = -260 * 9.4 * 16.546,
tp = 0.2,
xZ = rep(xZ,times = 4),
Z = c(Z1,Z2,Z3,Z4)
)
# Run MCMC ----------------------------------------------------------------
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
shinystan::launch_shinystan(fit)
Z_rep <- as_draws_matrix(fit$draws("Z_sim"), .nchains = 1)
Z_rep_mean = colMeans(Z_rep)
ppc_dens_overlay(Z,Z_rep[1:25, ])
ppc_dens_overlay(Z,Z_rep[1:50, ])
min(fit$draws("f"))
max(fit$draws("f"))
min(fit$draws("k"))
max(fit$draws("k"))
mean(fit$draws("k"))
mean(fit$draws("f"))
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
fit <- mod$sample(
data = data_list,
chains = 1,
parallel_chains = 1,
iter_sampling = 3000,
fixed_param = TRUE
)
Z_rep <- as_draws_matrix(fit$draws("Z_sim"), .nchains = 1)
Z_rep_mean = colMeans(Z_rep)
ppc_dens_overlay(Z,Z_rep[1:50, ])
plot(xZ,Z)
plot(rep(xZ,times=4),Z)
lines(rep(xZ,times=4),Z_rep_mean,col = "blue")
mean(fit$draws("sigma"))
mean(fit$draws("f"))
mean(fit$draws("k"))
mean(fit$draws("R2b"))
mean(fit$draws("R1b"))
mean(fit$draws("Z_tilde"))
min(fit$draws("Z_tilde"))
max(fit$draws("Z_tilde"))
ppc_boxplot(Z,Z_rep[1:50,])
bayesplot_theme_set(new = theme_gray())
bayesplot_theme_set(new = theme_gray())
ppc_boxplot(Z,Z_rep[1:50,])
color_scheme_set("red")
ppc_boxplot(Z,Z_rep[1:50,])
rm(list = ls())
gc()
dev.off)
dev.off
dev.off()
