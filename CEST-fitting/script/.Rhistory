# we recommend running this is a fresh R session or restarting your current session
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
library(cmdstanr)
set_cmdstan_path()
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
set_cmdstan_path()
install_cmdstan()
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("red")
bayesplot_theme_set(new = theme_default())
modelName <- "CEST"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
# Model Configuration -----------------------------------------------------
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_323_500.csv"),header = FALSE)
xZ = with(Xdata,V1)
Z = with(Xdata,V2)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_exp"
# Create data set
data_list <- list(
N = length(xZ),
R1a = 8,
R2a = 393,
w1 = 500,
dw = -260*9.4*16.546,
tp = 0.2,
xZ = xZ,
Z = Z
)
# Specify initial estimates
init_estimates = function() list(
R1b_std = runif(n=1, min=0.01, max=1),
R2b_std = runif(n=1, min=0.01, max=1),
f_std = runif(n=1, min=0.01, max=1),
k_std = runif(n=1, min=0.01, max=1),
sigma_std = runif(n=1, min=0.01, max=1)
)
rds_file <- file.path(outDir, paste(expName, "_fit.RDS", sep = ""))
fit <- readRDS(rds_file)
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
# Print summary statistics
fit$summary(pars_to_fit)
fit_pml <- mod$optimize(
data = data_list,
init = init_estimates
)
# Summarize results
optimized_pars <- fit_pml$summary(pars_to_fit)
print(optimized_pars)
rm(list = ls())
gc()
# Load libraries
library(cmdstanr)
library(posterior)
library(bayesplot)
library(ggplot2)
color_scheme_set("red")
bayesplot_theme_set(new = theme_default())
modelName <- "CEST"
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
scriptDir <- getwd()
projectDir <- dirname(scriptDir)
figDir <- file.path(projectDir, "deliv", "figure", modelName)
tabDir <- file.path(projectDir, "deliv", "table", modelName)
dataDir <- file.path(projectDir, "data", "derived")
modelDir <- file.path(projectDir, "model")
outDir <- file.path(modelDir, modelName)
# Model Configuration -----------------------------------------------------
stan_file <- file.path(modelDir, paste(modelName, ".stan", sep = ""))
mod <- cmdstan_model(stan_file, compile = FALSE)
# Before compiling a stan model, check syntax for improvement with:
mod$check_syntax(pedantic = TRUE)
# Compile stan model
mod$compile(stanc_options = list("O1"))
Xdata <- read.csv(file.path(dataDir, "LP30_323_500.csv"),header = FALSE)
xZ = with(Xdata,V1)
Z = with(Xdata,V2)
# Specify current experiment name. e.g. 'LP30_323_500_{sim/exp}'
# for Material: LP30, temperature: 323K, w1: 500Hz
expName <- "LP30_323_500_exp"
# Create data set
data_list <- list(
N = length(xZ),
R1a = 8,
R2a = 393,
w1 = 500,
dw = -260*9.4*16.546,
tp = 0.2,
xZ = xZ,
Z = Z
)
# Specify initial estimates
init_estimates = function() list(
R1b_std = runif(n=1, min=0.01, max=1),
R2b_std = runif(n=1, min=0.01, max=1),
f_std = runif(n=1, min=0.01, max=1),
k_std = runif(n=1, min=0.01, max=1),
sigma_std = runif(n=1, min=0.01, max=1)
)
rds_file <- file.path(outDir, paste(expName, "_fit.RDS", sep = ""))
fit <- readRDS(rds_file)
pars_to_fit <- c("R1b", "R2b", "f", "k", "sigma")
posterior <- as.array(fit$draws())
fit_summary <- fit$summary(pars_to_fit)
fit_summary$mean[1]
transformed_init = function() list(
R1b_std = fit_summary$mean[1] / 5,
R2b_std = (fit_summary$mean[2] - 27000) / 5000,
f_std = (fit_summary$mean[3] - 0.015) / 0.005,
k_std = (fit_summary$mean[4] - 150) / 100,
sigma_std = fit_summary$mean[5] / 0.05
)
View(transformed_init)
transformed_init = function(fit_summary) list(
R1b_std = fit_summary$mean[1] / 5,
R2b_std = (fit_summary$mean[2] - 27000) / 5000,
f_std = (fit_summary$mean[3] - 0.015) / 0.005,
k_std = (fit_summary$mean[4] - 150) / 100,
sigma_std = fit_summary$mean[5] / 0.05
)
fit_pml <- mod$optimize(
data = data_list,
init = transformed_init(fit_summary)
)
View(init_estimates)
theta = runif(1)
fit_summary$mean[5]
fit_summary$mean[4]
(fit_summary$mean[4] - 150) / 100
theta
transformed_init = function(fit_summary) list(
R1b_std = list(fit_summary$mean[1] / 5),
R2b_std = list((fit_summary$mean[2] - 27000) / 5000),
f_std = list((fit_summary$mean[3] - 0.015) / 0.005),
k_std = list((fit_summary$mean[4] - 150) / 100),
sigma_std = list(fit_summary$mean[5] / 0.05)
)
fit_pml <- mod$optimize(
data = data_list,
init = transformed_init(fit_summary)
)
R1b_std = fit_summary$mean[1] / 5
list(
R1b_std = fit_summary$mean[1] / 5,
R2b_std = (fit_summary$mean[2] - 27000) / 5000,
f_std = (fit_summary$mean[3] - 0.015) / 0.005,
k_std = (fit_summary$mean[4] - 150) / 100,
sigma_std = fit_summary$mean[5] / 0.05
)
list(
R1b_std = runif(n=1, min=0.01, max=1),
R2b_std = runif(n=1, min=0.01, max=1),
f_std = runif(n=1, min=0.01, max=1),
k_std = runif(n=1, min=0.01, max=1),
sigma_std = runif(n=1, min=0.01, max=1)
)
fit_pml <- mod$optimize(
data = data_list,
init = init_estimates()
)
transformed_init = function(fit_summary) list(
R1b_std = fit_summary$mean[1] / 5,
R2b_std = (fit_summary$mean[2] - 27000) / 5000,
f_std = (fit_summary$mean[3] - 0.015) / 0.005,
k_std = (fit_summary$mean[4] - 150) / 100,
sigma_std = fit_summary$mean[5] / 0.05
)
fit_pml <- mod$optimize(
data = data_list,
init = transformed_init(fit_summary)
)
transformed_init = function(fit_summary) list(
list(
R1b_std = fit_summary$mean[1] / 5,
R2b_std = (fit_summary$mean[2] - 27000) / 5000,
f_std = (fit_summary$mean[3] - 0.015) / 0.005,
k_std = (fit_summary$mean[4] - 150) / 100,
sigma_std = fit_summary$mean[5] / 0.05
)
)
fit_pml <- mod$optimize(
data = data_list,
init = transformed_init(fit_summary)
)
optimized_pars <- fit_pml$summary(pars_to_fit)
print(optimized_pars)
optimized_pars <- fit_pml$summary(pars_to_fit)
print(optimized_pars)
p1 <- mcmc_hist(fit$draws("f")) +
vline_at(fit_pml$mle("f"), size = 1.5)
p2 <- mcmc_hist(fit$draws("k")) +
vline_at(fit_pml$mle("k"), size = 1.5)
p3 <- mcmc_hist(fit$draws("R1b")) +
vline_at(fit_pml$mle("R1b"), size = 1.5)
p4 <- mcmc_hist(fit$draws("R2b")) +
vline_at(fit_pml$mle("R2b"), size = 1.5)
cowplot::plot_grid(p1,p2,p3,p4, nrow = 2, ncol = 2)
