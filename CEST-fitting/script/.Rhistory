PACKAGES <- readRDS("C:/Users/berna/Downloads/PACKAGES.rds")
View(PACKAGES)
View(PACKAGES)
PACKAGES
clear
clc
clear
file <- file.choose()
readRDS()
readRDS(file = file)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("bayesplot")
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install_cmdstan()
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
library(cmdstanr)
check_cmdstan_toolchain(fix = TRUE, quiet = TRUE)
check_cmdstan_toolchain()
install_cmdstan(cores = 4)
install_cmdstan(cores = 4, overwrite = TRUE)
cmdstan_path()
cmdstan_version()
file <- file.path(cmdstan_path(), "examples","bernoulli","bernoulli.stan")
mod <- cmdstan_model(file)
mod$print
mod$exe_file()
mod$print()
# names correspond to the data block in the Stan program
data_list <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))
fit <- mod$sample(
data = data_list,
seed = 123,
chains = 4,
parallel_chains = 4,
refresh = 500 # print update every 500 iters
)
$sample
fit$summary()
mcmc_hist(fit$draw("theta"))
library(posterior)
library(bayesplot)
color_scheme_set("brightblue")
mcmc_hist(fit$draw("theta"))
# default is a 3-D draws_array object from the posterior package
# iterations x chains x variables
draws_arr <- fit$draws() # or format="array"
str(draws_arr)
# draws x variables data frame
draws_df <- fit$draws(format = "df")
str(draws_df)
# this should be identical to draws_df created via draws(format = "df")
draws_df_2 <- as_draws_df(draws_arr)
identical(draws_df, draws_df_2)
mcmc_hist(fit$draws("theta"))
A = [2,2;3,4]
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("StanHeaders", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages(bayesplot)
installed.packages(bayesplot)
installed.packages(rstan)
library(rstan)
detach("package:rstan", unload = TRUE)
library(bayesplot)
install.packages("bayesplot")
install.packages("bayesplot")
installed.packages("rstan")
installed.packages("bayesplot")
require(rstan)
require(bayesplot)
require(parallel)
install.packages("fdrtool")
setwd("~/Weizmann/rotation-1/CEST-fitting/script")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
fit <- stan(file = file.path(modelDir, paste(modelName, ".stan", sep = "")),
data = data,
pars = parameters,
iter = nIter,
warmup = nBurnin,
thin = nThin,
#control = list(adapt_delta = 0.9),
chains = nChains)
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
source("~/Weizmann/rotation-1/CEST-fitting/script/CEST.R")
require(shinystan)
launch_shinystan(fit)
require(ggplot2)
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = median)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
fit
fit
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
mean = mean(value),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = mean)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
mean = mean(value),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = mean)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
options(bayesplot.base_size = 12,
bayesplot.base_family = "sans")
color_scheme_set(scheme = "brightblue")
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12))
rhats <- rhat(fit, pars = parametersToPlot)
mcmc_rhat(rhats) + yaxis_text() + myTheme
ratios1 <- neff_ratio(fit, pars = parametersToPlot)
mcmc_neff(ratios1) + yaxis_text() + myTheme
mcmcHistory(fit, pars = parametersToPlot, nParPerPage = 5, myTheme = myTheme)
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16, byChain = TRUE,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
pairs(fit, pars = parametersToPlot[!grepl("rho", parametersToPlot)])
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
write.csv(ptable, file = file.path(tabDir, paste(modelName, "ParameterTable.csv", sep = "")))
################################################################################################
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
mean = mean(value),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = mean)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
fit
options(bayesplot.base_size = 12,
bayesplot.base_family = "sans")
color_scheme_set(scheme = "brewer-Spectral")
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12))
rhats <- rhat(fit, pars = parametersToPlot)
mcmc_rhat(rhats) + yaxis_text() + myTheme
ratios1 <- neff_ratio(fit, pars = parametersToPlot)
mcmc_neff(ratios1) + yaxis_text() + myTheme
mcmcHistory(fit, pars = parametersToPlot, nParPerPage = 5, myTheme = myTheme)
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16, byChain = TRUE,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
pairs(fit, pars = parametersToPlot[!grepl("rho", parametersToPlot)])
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
write.csv(ptable, file = file.path(tabDir, paste(modelName, "ParameterTable.csv", sep = "")))
################################################################################################
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = median)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
options(bayesplot.base_size = 12,
bayesplot.base_family = "sans")
color_scheme_set(scheme = "blue")
myTheme <- theme(text = element_text(size = 12), axis.text = element_text(size = 12))
rhats <- rhat(fit, pars = parametersToPlot)
mcmc_rhat(rhats) + yaxis_text() + myTheme
ratios1 <- neff_ratio(fit, pars = parametersToPlot)
mcmc_neff(ratios1) + yaxis_text() + myTheme
mcmcHistory(fit, pars = parametersToPlot, nParPerPage = 5, myTheme = myTheme)
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16, byChain = TRUE,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
mcmcDensity(fit, pars = parametersToPlot, nParPerPage = 16,
myTheme = theme(text = element_text(size = 12), axis.text = element_text(size = 10)))
pairs(fit, pars = parametersToPlot[!grepl("rho", parametersToPlot)])
ptable <- monitor(as.array(fit, pars = parametersToPlot), warmup = 0, print = FALSE)
write.csv(ptable, file = file.path(tabDir, paste(modelName, "ParameterTable.csv", sep = "")))
################################################################################################
pred <- as.data.frame(fit, pars = "Z_pred") %>%
gather(factor_key = TRUE) %>%
group_by(key) %>%
summarize(lb = quantile(value, probs = 0.05),
median = quantile(value, probs = 0.5),
ub = quantile(value, probs = 0.95)) %>%
bind_cols(Xdata %>% dplyr:::select(V1, V2))
p1 <- ggplot(pred, aes(x = xZ, y = Z))
p1 <- p1 + geom_point() +
labs(x = "offsets (Hz)",
y = "Z spectrum") +
theme(text = element_text(size = 12), axis.text = element_text(size = 12),
legend.position = "none", strip.text = element_text(size = 8))
p1 + geom_line(aes(x = xZ, y = median)) +
geom_ribbon(aes(ymin = lb, ymax = ub), alpha = 0.25)
dev.off()
install.packages("GGally")
require(GGally)
ggpairs(fit, pars = parametersToPlot[!grepl("rho", parametersToPlot)])
pairs(fit, pars = parametersToPlot[!grepl("rho", parametersToPlot)])
show(fit)
print(fit)
plot(fit,plotfun="hist")
plot(fit,plotfun="hist",pars=parametersToPlot)
plot(fit,plotfun="trace",pars=parametersToPlot)
plot(fit,plotfun="rhat",pars=parametersToPlot)
stan_ac
stan_ac(fit,pars=parametersToPlot)
stan_dens(fit,pars=parametersToPlot)
stan_plot(fit,pars=parametersToPlot)
summary(fit)
get_posterior_mean(fit,par=otherRVs)
get_elapsed_time(fit)
get_cppo_mode(fit)
print(fit,pars=parametersToPlot)
params <- extract(fit,pars = parametersToPlot)
params <- extract(fit)
